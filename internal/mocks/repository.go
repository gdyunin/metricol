// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	metrics "github.com/gdyunin/metricol.git/internal/metrics"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetMetric provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetMetric(_a0 string, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetMetric")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Metrics provides a mock function with no fields
func (_m *MockRepository) Metrics() map[string]map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metrics")
	}

	var r0 map[string]map[string]string
	if rf, ok := ret.Get(0).(func() map[string]map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]string)
		}
	}

	return r0
}

// MetricsCount provides a mock function with no fields
func (_m *MockRepository) MetricsCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetricsCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PushMetric provides a mock function with given fields: _a0
func (_m *MockRepository) PushMetric(_a0 metrics.Metric) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PushMetric")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metrics.Metric) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
