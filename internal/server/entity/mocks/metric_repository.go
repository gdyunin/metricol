// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/gdyunin/metricol.git/internal/server/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockMetricRepository is an autogenerated mock type for the MetricRepository type
type MockMetricRepository struct {
	mock.Mock
}

// All provides a mock function with no fields
func (_m *MockMetricRepository) All() ([]*entity.Metric, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*entity.Metric
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.Metric, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Metric); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Metric)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: metric
func (_m *MockMetricRepository) Create(metric *entity.Metric) error {
	ret := _m.Called(metric)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Metric) error); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsExists provides a mock function with given fields: filter
func (_m *MockMetricRepository) IsExists(filter *entity.Filter) (bool, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for IsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Filter) (bool, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*entity.Filter) bool); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*entity.Filter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: filter
func (_m *MockMetricRepository) Read(filter *entity.Filter) (*entity.Metric, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *entity.Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Filter) (*entity.Metric, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*entity.Filter) *entity.Metric); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Metric)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Filter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: metric
func (_m *MockMetricRepository) Update(metric *entity.Metric) error {
	ret := _m.Called(metric)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Metric) error); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockMetricRepository creates a new instance of MockMetricRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricRepository {
	mock := &MockMetricRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
