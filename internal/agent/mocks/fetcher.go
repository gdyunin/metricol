// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	metrics "github.com/gdyunin/metricol.git/internal/metrics"
	mock "github.com/stretchr/testify/mock"
)

// MockFetcher is an autogenerated mock type for the Fetcher type
type MockFetcher struct {
	mock.Mock
}

// AddMetrics provides a mock function with given fields: newMetrics
func (_m *MockFetcher) AddMetrics(newMetrics ...metrics.Metric) {
	_va := make([]interface{}, len(newMetrics))
	for _i := range newMetrics {
		_va[_i] = newMetrics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Fetch provides a mock function with no fields
func (_m *MockFetcher) Fetch() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Metrics provides a mock function with no fields
func (_m *MockFetcher) Metrics() []metrics.Metric {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metrics")
	}

	var r0 []metrics.Metric
	if rf, ok := ret.Get(0).(func() []metrics.Metric); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]metrics.Metric)
		}
	}

	return r0
}

// NewMockFetcher creates a new instance of MockFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFetcher {
	mock := &MockFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
