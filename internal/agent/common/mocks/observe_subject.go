// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	common "github.com/gdyunin/metricol.git/internal/agent/common"
	mock "github.com/stretchr/testify/mock"
)

// MockObserveSubject is an autogenerated mock type for the ObserveSubject type
type MockObserveSubject struct {
	mock.Mock
}

// NotifyObservers provides a mock function with no fields
func (_m *MockObserveSubject) NotifyObservers() {
	_m.Called()
}

// RegisterObserver provides a mock function with given fields: observer
func (_m *MockObserveSubject) RegisterObserver(observer common.Observer) error {
	ret := _m.Called(observer)

	if len(ret) == 0 {
		panic("no return value specified for RegisterObserver")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Observer) error); ok {
		r0 = rf(observer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveObserver provides a mock function with given fields: observer
func (_m *MockObserveSubject) RemoveObserver(observer common.Observer) error {
	ret := _m.Called(observer)

	if len(ret) == 0 {
		panic("no return value specified for RemoveObserver")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Observer) error); ok {
		r0 = rf(observer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockObserveSubject creates a new instance of MockObserveSubject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObserveSubject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObserveSubject {
	mock := &MockObserveSubject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
